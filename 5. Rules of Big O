/*Rule 1*/
Always worst case

const nemo = ['nemo'];
const everyone = ['dory', 'bruce', 'marlin', 'grill', 'bloat', 'nigel', 'squirt', 'darla', 'hank', 'nemo'];
const large = new Array(100000).fill('nemo');

function findNemo(array) {
  for(let i = 0; i < array.length; i++) {
    console.log('running');
    if(array[i] == 'nemo') {
      console.log('Found NEMO!');
      break;
    }
  }
}

findNemo(everyone);

//Cuando 'nemo' sea siempre el primer elemento el big O seria O(1)
//Cuando 'nemo' este posicionado en cualquier otra posicion el big O seria O(n)
//Como el peor caso es O(n) entonces el Big O seria O(n)

/*Rule 2*/
Remove constants

function printFirstItem(items) {
  console.log(items[0]);
  
  var middleIndex = Math.floor(items.length / 2);
  var index = 0;
  
  while (index < middleIndex) {
    console.log(items[index]);
    index++;
  }
  
  for(var i = 0; i < 100; i++) {
    console.log('hi');
  }
}

O(1+ n/2 + 101) => O(n)

//other example:
function compressBoxesTwice(boxes) {
  boxes.forEach(function(boxes){
    console.log(boxes);
  });
  
  boxes.forEach(function(boxes){
    console.log(boxes);
  });
}

O(2n) => 0(n)

/* Rule 3 */
Different inputs should have different variables.

function compressBoxesTwice(boxes, boxes2) {
  boxes.forEach(function(boxes){
    console.log(boxes);
  });
  
  boxes2.forEach(function(boxes){
    console.log(boxes);
  });
}

O(a + b)


/*Rule 4*/
Drop Non-dominant terms

function printAllNumbersThenAllPairSums(numbers) {
  
  console.log('these are the numbers:');
  numbers.forEach(function(number){
    console.log(number);
  });
  
  console.log('and these are their sums:');
  numbers.forEach(function(firstNumber){
    numbers.forEach(function(secondNumber){
      console.log(firstNumber + secondNumber);
    });
  });
}

printAllNumbersThenAllPairSums([1,2,3,4,5])

O(x^2+3x+100+x/2) => O(x^2)
//Se cambia al termino que tiene mas relevacia al incrementar datos




